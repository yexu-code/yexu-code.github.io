<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/07/30/test/"/>
      <url>/2022/07/30/test/</url>
      
        <content type="html"><![CDATA[<h2 id="1、记录"><a href="#1、记录" class="headerlink" title="1、记录"></a>1、记录</h2><p>第一篇博客诞生啦!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/30/hello-world/"/>
      <url>/2022/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据稽核、上传SFTP服务器</title>
      <link href="/2022/07/30/da-jian-sftp-fu-wu-qi-shu-ju-ji-he/"/>
      <url>/2022/07/30/da-jian-sftp-fu-wu-qi-shu-ju-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="1-搭建SFTP服务器"><a href="#1-搭建SFTP服务器" class="headerlink" title="1 搭建SFTP服务器"></a>1 搭建SFTP服务器</h2><h3 id="1-1-FreeSSHd"><a href="#1-1-FreeSSHd" class="headerlink" title="1.1 FreeSSHd"></a>1.1 FreeSSHd</h3><p>下载FreeSSHd软件，并配置好SFTP服务器的IP地址、监听端口、用户名以及用户密码等信息，启动SFTP服务器。<br><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/ssh.png"></p><h3 id="1-2-连接SFTP服务器"><a href="#1-2-连接SFTP服务器" class="headerlink" title="1.2 连接SFTP服务器"></a>1.2 连接SFTP服务器</h3><p>创建一个SFTP工具类SFTPUtil.java，里面包含各种工具接口，例如连接&#x2F;关闭SFTP服务器、向服务器上传文件、下载文件等等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SFTPUtil &#123;    private ChannelSftp sftp;    private Session session;    private String username;    private String password;    private String host;    private int port;        public SFTPUtil(String username, String password, String host, int port) &#123;        this.username &#x3D; username;        this.password &#x3D; password;        this.host &#x3D; host;        this.port &#x3D; port;    &#125;    &#x2F;**     * 连接sftp服务器     *&#x2F;    public void login()&#123;        ...    &#125;    &#x2F;**     * 关闭连接 server     *&#x2F;    public void logout()&#123;        ...    &#125;    &#x2F;**     * 将输入流的数据上传到sftp作为文件。文件完整路径&#x3D;basePath+directory     * @param basePath  服务器的基础路径     * @param directory  上传目录     * @param sftpFileName  sftp端文件名     * @param input   输入流     *&#x2F;    public void upload(String basePath, String directory, String sftpFileName, InputStream input) throws SftpException&#123;        ...    &#125;    &#x2F;**     * 下载文件。     * @param directory 下载目录     * @param downloadFile 下载的文件     * @param saveFile 存在本地的路径     *&#x2F;    public void download(String directory, String downloadFile, String saveFile) throws SftpException, FileNotFoundException&#123;        ...    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好用户名、密码、IP地址和端口信息，进行连接SFTP服务器和关闭服务器连接的测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testConnect()&#123;    SFTPUtil sftp &#x3D; new SFTPUtil(username, password, host, port);    sftp.login();    sftp.logout();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">SFTP服务器连接成功!SFTP服务器连接关闭.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-上传文件"><a href="#1-3-上传文件" class="headerlink" title="1.3 上传文件"></a>1.3 上传文件</h3><p>在SFTPUtil.java中新建一个上传文件的方法upload()，利用ChannelSftp类中的put方法上传文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void upload(String basePath, String directory, String sftpFileName, InputStream input) throws SftpException&#123;    try &#123;        sftp.cd(basePath);        sftp.cd(directory);    &#125; catch (SftpException e) &#123;        &#x2F;&#x2F;目录不存在，则创建文件夹        String [] dirs &#x3D; directory.split(&quot;&#x2F;&quot;);        String tempPath &#x3D; basePath;        for(String dir:dirs)&#123;            if(null &#x3D;&#x3D; dir || &quot;&quot;.equals(dir)) continue;            tempPath +&#x3D; &quot;&#x2F;&quot; + dir;            try&#123;                sftp.cd(tempPath);            &#125;catch(SftpException ex)&#123;                sftp.mkdir(tempPath);                sftp.cd(tempPath);            &#125;        &#125;    &#125;    sftp.put(input, sftpFileName);  &#x2F;&#x2F;上传文件    System.out.println(&quot;上传文件至 &quot; + basePath + directory + &quot;&#x2F;&quot; + sftpFileName + &quot; 成功!&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试将一个本地文件上传到服务器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testUpload()&#123;    SFTPUtil sftp &#x3D; new SFTPUtil(username, password, host, port);    sftp.login();    File file &#x3D; new File(&quot;D:\\test.java&quot;);    InputStream is &#x3D; null;    try &#123;        is &#x3D; new FileInputStream(file);    &#125; catch (FileNotFoundException e) &#123;        e.printStackTrace();    &#125;    try &#123;        sftp.upload(&quot;&#x2F;&quot;,&quot;&#x2F;upload&quot;, &quot;test_sftp.java&quot;, is);    &#125; catch (SftpException e) &#123;        e.printStackTrace();    &#125;    sftp.logout();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下。</p><pre class="line-numbers language-none"><code class="language-none">SFTP服务器连接成功！上传文件至 &#x2F;&#x2F;upload&#x2F;test_sftp.java 成功!SFTP服务器连接关闭.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-文件处理"><a href="#2-文件处理" class="headerlink" title="2 文件处理"></a>2 文件处理</h2><h3 id="2-1-文件拆分"><a href="#2-1-文件拆分" class="headerlink" title="2.1 文件拆分"></a>2.1 文件拆分</h3><p>创建一个文件工具类FileUtils，用于对文件做各种处理，如文件拆分、压缩等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class FileUtils &#123;    &#x2F;**     * 将一个文件按照每若干条记录进行拆分     * @param recordsNum 拆分的记录数     * @param sourceDir 源文件路径     * @param targetDir 生成的目标文件路径，在文件名最后添加了&quot;_1&#x2F;2&#x2F;3&quot;     *&#x2F;    public void splitFile(int recordsNum, String sourceDir, String targetDir) throws IOException &#123;        ...    &#125;    &#x2F;**     * 压缩为GZIP文件     * @param sourceDir 源文件路径     * @param targetDir 生成的目标文件路径     *&#x2F;    public void compressFile(String sourceDir, String targetDir) throws IOException &#123;        ...    &#125;    &#x2F;**     * 将List集合中的数据写入到目标文件中     * @param list 带写入的数据集合     * @param targetDir 目标文件路径     *&#x2F;    public void list2File(List&lt;?&gt; list, String targetDir)&#123;        ...    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现有一个文件AUDIT_ECEMOP_S_IAAS_9999992_RP-25_20211223_01_045952_05-01，包含1万条记录。目标是每2000条记录拆分成一个子文件，所以共可以分成5个包含2000条数据的子文件。</p><p>编写一个拆分文件的方法splitFile()，能够按照指定记录数拆分文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void splitFile(int recordsNum, String sourceDir, String targetDir) throws IOException &#123;        Date date &#x3D; new Date();        &#x2F;&#x2F; 源文件        File sourceFile &#x3D; new File(sourceDir);        FileInputStream fis &#x3D; new FileInputStream(sourceFile);        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(fis));        &#x2F;&#x2F; 计算源文件总记录数        int lineCount &#x3D; 0;        FileReader fr &#x3D; new FileReader(sourceFile);        LineNumberReader lnr &#x3D; new LineNumberReader(fr);        lnr.skip(Long.MAX_VALUE);        lineCount &#x3D; lnr.getLineNumber();        lnr.close();        &#x2F;&#x2F; 需生成的文件数        int fileNum &#x3D; lineCount &#x2F; recordsNum + (lineCount % recordsNum &#x3D;&#x3D; 0 ? 0 : 1);        int recordsCount &#x3D; 0; &#x2F;&#x2F; 已读取的记录数        String line &#x3D; null;        for (int fileCount &#x3D; 1; fileCount &lt;&#x3D; fileNum; fileCount++)&#123;            &#x2F;&#x2F; 目标文件            File targetFile &#x3D; new File(targetDir + &quot;_&quot; + sdf.format(date) + &quot;_&quot; + lineCount + &quot;_&quot; + fileNum + &quot;-&quot; + fileCount);            if (!targetFile.exists())&#123;                targetFile.createNewFile();            &#125;            FileOutputStream fos &#x3D; new FileOutputStream(targetFile);            BufferedWriter bw &#x3D; new BufferedWriter(new OutputStreamWriter(fos));            while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;                bw.write(line);                recordsCount++;                if (recordsCount &#x3D;&#x3D; recordsNum) &#123;                    recordsCount &#x3D; 0;                    bw.flush();                    bw.close();                    break;                &#125; else if (recordsCount &lt; recordsNum)&#123;                    bw.newLine();                 &#125;            &#125;            bw.close();             System.out.println(&quot;第&quot; + fileCount + &quot;个文件已生成.&quot;);        &#125;        br.close();        System.out.println(&quot;文件拆分结束!&quot;);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拆分文件测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testSplitFile() throws IOException &#123;    int recordsNum &#x3D; 2000;    String sourceDir &#x3D; &quot;D:\\data\\AUDIT_ECEMOP_S_IAAS_9999992_RP-25_20211223_01_045952_05-01&quot;;    String targetDir &#x3D; &quot;D:\\data\\test_AUDIT_ECEMOP_S_IAAS_9999992_RP-25_20220721&quot;;    fileUtils.splitFile(recordsNum, sourceDir, targetDir);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">第1个文件已生成.第2个文件已生成.第3个文件已生成.第4个文件已生成.第5个文件已生成.文件拆分结束!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/%E6%8B%86%E5%88%86%E6%96%87%E4%BB%B6.png"></p><h3 id="2-2-压缩文件"><a href="#2-2-压缩文件" class="headerlink" title="2.2 压缩文件"></a>2.2 压缩文件</h3><p>编写一个压缩文件的方法compressFile()，将文件压缩为gzip格式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void compressFile(String sourceDir, String targetDir) throws IOException &#123;    &#x2F;&#x2F; 源文件    File sourceFile &#x3D; new File(sourceDir);    FileInputStream fis &#x3D; new FileInputStream(sourceFile);    &#x2F;&#x2F; 目标文件    File targetFile &#x3D; new File(targetDir);    if (!targetFile.exists())&#123;        targetFile.createNewFile();    &#125;    FileOutputStream fos &#x3D; new FileOutputStream(targetFile);    GZIPOutputStream gos &#x3D; new GZIPOutputStream(fos);    byte[] buffer &#x3D; new byte[1024];    while(fis.read(buffer) &gt; 0)&#123;        gos.write(buffer);    &#125;    fis.close();    gos.finish();    gos.close();    System.out.println(&quot;文件压缩成功!&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上一步拆分生成的5个子文件进行压缩。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testCompressFile() throws IOException &#123;    for (int i &#x3D; 1; i &lt;&#x3D; 5; i++)&#123;        String sourceDir &#x3D; &quot;D:\\data\\test_AUDIT_ECEMOP_S_IAAS_9999992_RP-25_20220721_&quot; + i;        String targetDir &#x3D; &quot;D:\\data\\compress\\test_AUDIT_ECEMOP_S_IAAS_9999992_RP-25_20220721_&quot; + i +&quot;.gz&quot;;        fileUtils.compressFile(sourceDir, targetDir);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">压缩文件成功!压缩文件成功!压缩文件成功!压缩文件成功!压缩文件成功!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95.png"></p><h2 id="3-数据稽核"><a href="#3-数据稽核" class="headerlink" title="3 数据稽核"></a>3 数据稽核</h2><h3 id="3-1-构造数据"><a href="#3-1-构造数据" class="headerlink" title="3.1 构造数据"></a>3.1 构造数据</h3><p>首先新建一个数据库，在数据库中新建两张表。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;console_os_biz_vm_host&#96; (&#96;ID&#96; varchar(50) NOT NULL COMMENT &#39;唯一标示，资源编码&#39;,&#96;NAME&#96; varchar(100) DEFAULT NULL COMMENT &#39;虚拟机名称&#39;,&#96;IS_DELETE&#96; int(2) DEFAULT &#39;0&#39; COMMENT &#39;是否删除 1删除0未删除&#39;,PRIMARY KEY (&#96;ID&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;控制台虚拟机表&#39;;CREATE TABLE &#96;openstack_os_biz_vm_host&#96; (&#96;ID&#96; varchar(50) NOT NULL COMMENT &#39;唯一标示，资源编码&#39;,&#96;NAME&#96; varchar(100) DEFAULT NULL COMMENT &#39;虚拟机名称&#39;,&#96;IS_DELETE&#96; int(2) DEFAULT &#39;0&#39; COMMENT &#39;是否删除 1删除0未删除&#39;,PRIMARY KEY (&#96;ID&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;底层虚拟机表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据稽核的目的是找出控制台已删除，但是底层未删除的资源（控制台和底层资源不一致）。具体来说：</p><ul><li>控制台已删除: 控制台虚拟机表中对应记录IS_DELETE字段为1</li><li>底层未删除: 底层虚拟机表中对应记录IS_DELETE字段为0</li></ul><p>在根目录的entity包下创建两张表对应的实体类；在dao包下创建DAO接口以及对应的xml文件；在service包下创建UserService.java，并编写向表中添加数据的接口方法。然后向两张表中添加数据。 </p><div align=center>    <img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/目录.png" alt=""" width="250" height="350" /></div><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void insertData()&#123;    String config &#x3D; &quot;applicationContext.xml&quot;;    ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(config);    UserService userService &#x3D; (UserService) ctx.getBean(&quot;userService&quot;);    String id;    String name;    int isDelete;    &#x2F;&#x2F; 产生9200条需稽核数据       for (int i &#x3D; 1; i &lt;&#x3D; 9200; i++)&#123;           id &#x3D; &quot;CIDC-U-&quot; + CommonUtil.generateUUID().substring(0, 16);           name &#x3D; &quot;CIDC-A-&quot; + CommonUtil.generateUUID().substring(0, 16);           isDelete &#x3D; 0;           userService.addOpenstack(new OpenstackOsBizVmHost(id, name, isDelete));           isDelete &#x3D; 1;           userService.addConsole(new ConsoleOsBizVmHost(id, name, isDelete));       &#125;    &#x2F;&#x2F; 产生300条正确数据,共9500条数据    for (int i &#x3D; 1; i &lt;&#x3D; 300; i++)&#123;        id &#x3D; &quot;CIDC-U-&quot; + CommonUtil.generateUUID().substring(0, 16);        name &#x3D; &quot;CIDC-A-&quot; + CommonUtil.generateUUID().substring(0, 16);        isDelete &#x3D; 1;        userService.addOpenstack(new OpenstackOsBizVmHost(id, name, isDelete));        isDelete &#x3D; 0;        userService.addConsole(new ConsoleOsBizVmHost(id, name, isDelete));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>添加后的部分数据如下。<center class="half">    <img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/表open.png" width="40%"/>    <img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/表console.png" width="40%"/></center><h3 id="3-2-数据稽核"><a href="#3-2-数据稽核" class="headerlink" title="3.2 数据稽核"></a>3.2 数据稽核</h3><p>如前所述，目的是稽核出控制台已删除，但是底层未删除的资源。也即，在控制台虚拟机表中IS_DELETE字段为1，但在底层虚拟机表中IS_DELETE字段为0的记录。于是可以写出如下的SQL语句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT o.ID, o.NAME, o.IS_DELETEFROM console_os_biz_vm_host c, openstack_os_biz_vm_host oWHERE c.ID &#x3D; o.ID AND c.IS_DELETE &#x3D; 1 AND o.IS_DELETE &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在UserService类中编写数据稽核的接口方法queryInconsistentData，用于表数据稽核，并将稽核出的数据存入List集合中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public List&lt;OpenstackOsBizVmHost&gt; queryInconsistentData()&#123;    return dataAuditingDao.selectInconsistentData();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于两张表中各有9500条数据，其中有9200条数据存在不一致问题，也就是需要被稽核出来。测试代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testQueryInconsistentData()&#123;    String config &#x3D; &quot;applicationContext.xml&quot;;    ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(config);    UserService userService &#x3D; (UserService) ctx.getBean(&quot;userService&quot;);    List&lt;OpenstackOsBizVmHost&gt; listData &#x3D; userService.queryInconsistentData();    System.out.println(&quot;共稽核出 &quot; + listData.size() + &quot; 条不一致数据.&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下<br><code>共稽核出 9200 条不一致数据.</code></p><h3 id="3-3-将数据写入到文件"><a href="#3-3-将数据写入到文件" class="headerlink" title="3.3 将数据写入到文件"></a>3.3 将数据写入到文件</h3><p>由于上一步已经将稽核出的数据记录存入了List集合，所以需要把List集合中的数据写入到文件中。在FileUtil类中编写一个方法list2File，能够将List集合中的数据写入到目标文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void list2File(List&lt;?&gt; list, String targetDir)&#123;    &#x2F;&#x2F; 目标文件    File targetFile &#x3D; new File(targetDir);    if (!targetFile.exists())&#123;        try &#123;            targetFile.createNewFile();        &#125; catch (IOException e) &#123;            System.out.println(&quot;文件创建失败!&quot; + e.getMessage());        &#125;    &#125;    try &#123;        Writer writer &#x3D; new FileWriter(targetFile);        BufferedWriter bw &#x3D; new BufferedWriter(writer);        for (OpenstackOsBizVmHost os : (List&lt;OpenstackOsBizVmHost&gt;)list)&#123;            bw.write(os.getId() + &quot;|&quot; + os.getName() + &quot;|&quot; + os.getIsDelete());            bw.newLine();        &#125;        bw.close();    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;    System.out.println(&quot;数据写入完成!&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试该方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testList2File()&#123;    String config &#x3D; &quot;applicationContext.xml&quot;;    ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(config);    UserService userService &#x3D; (UserService) ctx.getBean(&quot;userService&quot;);    List&lt;OpenstackOsBizVmHost&gt; listData &#x3D; userService.queryInconsistentData();    String targetDir &#x3D; &quot;D:\\data\\test_inconsistentData&quot;;    fileUtils.list2File(listData, targetDir);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下。<br><code>数据写入完成!</code></p><h3 id="3-4-文件处理"><a href="#3-4-文件处理" class="headerlink" title="3.4 文件处理"></a>3.4 文件处理</h3><p>得到稽核出的数据文件之后，就可以利用第1、2节的内容，对文件进行拆分、压缩，然后上传到SFTP服务器。还有一个小细节需要注意，文件名中需要显示记录总数、总文件数以及文件序号，所以需要提前计算出稽核出的记录总数以及需要拆分的子文件个数，然后添加到文件名中。<br><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/%E6%8B%86%E5%88%86%E6%96%87%E4%BB%B6.png"><br><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">SFTP服务器连接成功!上传文件至 &#x2F;&#x2F;upload&#x2F;test_inconsistentDataSplit_20220726_9200_5-1.gz 成功!上传文件至 &#x2F;&#x2F;upload&#x2F;test_inconsistentDataSplit_20220726_9200_5-2.gz 成功!上传文件至 &#x2F;&#x2F;upload&#x2F;test_inconsistentDataSplit_20220726_9200_5-3.gz 成功!上传文件至 &#x2F;&#x2F;upload&#x2F;test_inconsistentDataSplit_20220726_9200_5-4.gz 成功!上传文件至 &#x2F;&#x2F;upload&#x2F;test_inconsistentDataSplit_20220726_9200_5-5.gz 成功!SFTP服务器连接关闭.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总体程序"><a href="#4-总体程序" class="headerlink" title="4 总体程序"></a>4 总体程序</h2><p>项目总体目录如下。<br><img src="https://cdn.jsdelivr.net/gh/yexu-code/blogImages/img/%E6%80%BB%E4%BD%93%E7%95%8C%E9%9D%A2.png"><br>总体测试程序如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test04 &#123;    &#x2F;**     * 总体测试程序     * Author: LiLei  Data: 2022&#x2F;7&#x2F;26     *&#x2F;    private FileUtils fileUtils &#x3D; new FileUtils();    private String username &#x3D; &quot;******&quot;;    private String password &#x3D; &quot;******&quot;;    private String host &#x3D; &quot;******&quot;;    private int port &#x3D; **;    private String homePath &#x3D; &quot;D:\\data\\&quot;;    @Test    public void dataAuditing() throws IOException &#123;        String config &#x3D; &quot;applicationContext.xml&quot;;        ApplicationContext ctx &#x3D; new ClassPathXmlApplicationContext(config);        UserService userService &#x3D; (UserService) ctx.getBean(&quot;userService&quot;);        &#x2F;&#x2F; 1.数据稽核,数据存入List集合        List&lt;OpenstackOsBizVmHost&gt; listData &#x3D; userService.queryInconsistentData();        System.out.println(&quot;共稽核出 &quot; + + listData.size() + &quot; 条不一致数据.&quot;);        &#x2F;&#x2F; 2.将稽核出的List集合中的数据写入文件        String targetDir &#x3D; homePath + &quot;test_inconsistentData&quot;;        fileUtils.list2File(listData, targetDir);        &#x2F;&#x2F; 3.拆分文件        int lineCount &#x3D; 0; &#x2F;&#x2F; 源文件总记录数        FileReader fr &#x3D; new FileReader(targetDir);        LineNumberReader lnr &#x3D; new LineNumberReader(fr);        lnr.skip(Long.MAX_VALUE);        lineCount &#x3D; lnr.getLineNumber();        lnr.close();        int recordsNum &#x3D; 2000; &#x2F;&#x2F; 拆分后子文件的记录数        int fileNum &#x3D; lineCount &#x2F; recordsNum + (lineCount % recordsNum &#x3D;&#x3D; 0 ? 0 : 1); &#x2F;&#x2F; 需生成的文件数        String sourceDir &#x3D; homePath + &quot;test_inconsistentData&quot;;        targetDir &#x3D; homePath + &quot;test_inconsistentDataSplit&quot;;        fileUtils.splitFile(recordsNum, sourceDir, targetDir);        &#x2F;&#x2F; 4.压缩文件        for (int i &#x3D; 1; i &lt;&#x3D; fileNum; i++)&#123;            sourceDir &#x3D; homePath + &quot;test_inconsistentDataSplit_20220726_9200_5-&quot; + i;            targetDir &#x3D; homePath + &quot;compress\\test_inconsistentDataSplit_20220726_9200_5-&quot; + i +&quot;.gz&quot;;            fileUtils.compressFile(sourceDir, targetDir);        &#125;        &#x2F;&#x2F; 5.将压缩后的文件上传至SFTP服务器        SFTPUtil sftp &#x3D; new SFTPUtil(username, password, host, port);        sftp.login();        for(int i &#x3D; 1; i &lt;&#x3D; fileNum; i++)&#123;            String fileName &#x3D; &quot;test_inconsistentDataSplit_20220726_9200_5-&quot;;            File file &#x3D; new File(homePath + &quot;compress\\&quot; + fileName + i +&quot;.gz&quot;);            InputStream is &#x3D; null;            try &#123;                is &#x3D; new FileInputStream(file);            &#125; catch (FileNotFoundException e) &#123;                e.printStackTrace();            &#125;            String sftpFileName &#x3D; fileName + i + &quot;.gz&quot;;            try &#123;                sftp.upload(&quot;&#x2F;&quot;,&quot;&#x2F;upload&quot;, sftpFileName, is);                is.close();            &#125; catch (Exception e) &#123;                e.printStackTrace();            &#125;        &#125;        sftp.logout();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据稽核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SFTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
